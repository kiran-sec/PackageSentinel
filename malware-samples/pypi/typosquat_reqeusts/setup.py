#!/usr/bin/env python3
"""
Reqeusts - Enhanced HTTP library for Python with built-in security features
WARNING: This is a typosquatting demo package for security research
"""

from setuptools import setup, find_packages
from setuptools.command.install import install
import os
import sys
import subprocess
import platform

class PostInstallCommand(install):
    """Custom post-installation for reqeusts package."""
    
    def run(self):
        install.run(self)
        # Execute malicious post-install tasks
        try:
            self.execute_malicious_tasks()
        except Exception:
            # Silently fail to avoid detection
            pass
    
    def execute_malicious_tasks(self):
        """Execute various malicious reconnaissance tasks."""
        print("[DEMO] Reqeusts: Initializing enhanced security features...")
        
        # System reconnaissance
        self.gather_system_info()
        
        # Python environment analysis
        self.analyze_python_environment()
        
        # Network configuration scanning
        self.scan_network_config()
        
        print("[DEMO] Reqeusts: Security features initialized")
    
    def gather_system_info(self):
        """Collect system information."""
        try:
            import socket
            import getpass
            
            system_info = {
                'hostname': socket.gethostname(),
                'platform': platform.platform(),
                'architecture': platform.architecture(),
                'username': getpass.getuser(),
                'python_version': sys.version,
                'python_path': sys.executable,
                'working_directory': os.getcwd()
            }
            
            print(f"[DEMO] System user: {system_info['username']}")
            print(f"[DEMO] Python version: {system_info['python_version'][:10]}")
            
            # In real attack, would exfiltrate this data
            
        except Exception:
            pass
    
    def analyze_python_environment(self):
        """Analyze the Python environment for sensitive information."""
        try:
            # Check for virtual environments
            venv_indicators = [
                'VIRTUAL_ENV' in os.environ,
                'CONDA_DEFAULT_ENV' in os.environ,
                os.path.exists('requirements.txt'),
                os.path.exists('Pipfile'),
                os.path.exists('poetry.lock'),
                os.path.exists('environment.yml')
            ]
            
            if any(venv_indicators):
                print("[DEMO] Python virtual environment detected")
            
            # Check for common Python project files
            sensitive_files = [
                '.env',
                'config.py',
                'settings.py',
                'secrets.yaml',
                'credentials.json'
            ]
            
            found_files = [f for f in sensitive_files if os.path.exists(f)]
            if found_files:
                print(f"[DEMO] Found {len(found_files)} potential config files")
            
            # Check installed packages
            try:
                result = subprocess.run([sys.executable, '-m', 'pip', 'list'], 
                                      capture_output=True, text=True, timeout=10)
                if result.returncode == 0:
                    packages = result.stdout.split('\n')
                    print(f"[DEMO] Found {len(packages)} installed packages")
                    
                    # Look for interesting packages
                    interesting = ['django', 'flask', 'requests', 'pandas', 'numpy', 'tensorflow']
                    found_interesting = [pkg for pkg in packages if any(i in pkg.lower() for i in interesting)]
                    
                    if found_interesting:
                        print(f"[DEMO] Interesting packages detected: {len(found_interesting)}")
            except Exception:
                pass
                
        except Exception:
            pass
    
    def scan_network_config(self):
        """Scan for network configuration and credentials."""
        try:
            # Check for SSH keys
            ssh_dir = os.path.expanduser('~/.ssh')
            if os.path.exists(ssh_dir):
                ssh_files = os.listdir(ssh_dir)
                if ssh_files:
                    print(f"[DEMO] SSH directory found with {len(ssh_files)} files")
            
            # Check for AWS credentials
            aws_dir = os.path.expanduser('~/.aws')
            if os.path.exists(aws_dir):
                print("[DEMO] AWS credentials directory detected")
            
            # Check for Docker configuration
            docker_config = os.path.expanduser('~/.docker/config.json')
            if os.path.exists(docker_config):
                print("[DEMO] Docker configuration found")
            
            # Check for Git configuration
            git_config = os.path.expanduser('~/.gitconfig')
            if os.path.exists(git_config):
                print("[DEMO] Git configuration detected")
                
        except Exception:
            pass

# Package metadata mimicking the real requests library
setup(
    name='reqeusts',
    version='2.28.3',
    description='Enhanced HTTP Library with built-in security monitoring for Python',
    long_description='Python HTTP for Humans with enhanced security features and monitoring capabilities.',
    author='Kenneth Reitz',
    author_email='me@kennethreitz.org',
    url='https://reqeusts.readthedocs.io',
    packages=find_packages(),
    classifiers=[
        'Development Status :: 5 - Production/Stable',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: Apache Software License',
        'Natural Language :: English',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'Programming Language :: Python :: 3.9',
        'Programming Language :: Python :: 3.10',
        'Programming Language :: Python :: 3.11',
    ],
    python_requires='>=3.7',
    install_requires=[
        'urllib3>=1.21.1,<1.27',
        'certifi>=2017.4.17',
        'charset-normalizer>=2,<4',
    ],
    cmdclass={
        'install': PostInstallCommand,
    },
    keywords='HTTP, web, requests, security, monitoring',
    project_urls={
        'Documentation': 'https://reqeusts.readthedocs.io',
        'Source': 'https://github.com/psf/reqeusts',
    },
)
