// Advanced obfuscation patterns for testing new detection rules

// 1. String with non-visible characters (control characters)
const hiddenPayload1 = "normal_text\x00\x01\x02hidden_data\x1f\x7fmore_hidden";

// 2. Long string with multiple non-printable characters  
const obfuscatedData = "some_start_text\x00\x08\x0e\x1f\x7f\x81\x9f" + "x".repeat(200) + "\x00\x01\x02\x03more_control_chars";

// 3. Base64 decoding with atob()
const decodedString = atob("bWFsaWNpb3VzX2NvZGVfaGVyZQ==");

// 4. Critical pattern: eval() combined with atob()
eval(atob("Y29uc29sZS5sb2coJ21hbGljaW91cyBjb2RlIGV4ZWN1dGVkJyk="));

// 5. Buffer base64 decoding
const binaryPayload = Buffer.from("ZXZpbCBiaW5hcnkgZGF0YQ==", 'base64');

// 6. Hex decoding patterns
const hexDecoded = Buffer.from("48656c6c6f20576f726c64", 'hex');
const hexParsed = parseInt("deadbeef", 16);

// 7. String.fromCharCode obfuscation
const charCodeString = String.fromCharCode(104, 101, 108, 108, 111);
const appliedCharCodes = String.fromCharCode.apply(null, [119, 111, 114, 108, 100]);

// 8. Function constructor with atob
const dynamicFunc = new Function(atob("cmV0dXJuICJtYWxpY2lvdXMgZnVuY3Rpb24i"));

// 9. URL decoding patterns
const urlDecoded = decodeURIComponent("%6D%61%6C%69%63%69%6F%75%73");
const unescaped = unescape("%75%6E%65%73%63%61%70%65%64");

// 10. Combination patterns (should trigger CRITICAL markers)
const criticalCombo1 = eval(atob("Y29uc29sZS5sb2coJ2NyaXRpY2FsJyk="));
const criticalCombo2 = String.fromCharCode(101, 118, 97, 108) + "(\x00\x01hidden\x02)";

console.log("Advanced obfuscation test loaded");
