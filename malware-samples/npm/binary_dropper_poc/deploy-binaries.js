/**
 * Binary Deployment Script - POC
 * Demonstrates binary file deployment behavior
 */

const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

console.log('[*] Post-install: Deploying binary assets...');

const assetsDir = path.join(__dirname, 'assets');

function deployBinary(filename, content) {
    const binaryPath = path.join(assetsDir, filename);
    
    try {
        fs.writeFileSync(binaryPath, content);
        
        // Calculate hash for verification
        const hash = crypto.createHash('sha256').update(content).digest('hex');
        console.log(`[+] Deployed ${filename} (SHA256: ${hash.substring(0, 16)}...)`);
        
        // Make executable on Unix systems
        if (process.platform !== 'win32' && filename.endsWith('.bin')) {
            fs.chmodSync(binaryPath, 0o755);
        }
        
        return true;
    } catch (error) {
        console.error(`[!] Failed to deploy ${filename}: ${error.message}`);
        return false;
    }
}

// Create some sample binary files for demonstration
const binaryFiles = {
    'optimizer.exe': Buffer.from([
        0x4D, 0x5A, 0x90, 0x00, // MZ header (PE executable)
        0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
        // Fake PE data
        ...Array(100).fill(0).map(() => Math.floor(Math.random() * 256))
    ]),
    
    'liboptimizer.so': Buffer.from([
        0x7F, 0x45, 0x4C, 0x46, // ELF header (Linux shared library)
        0x02, 0x01, 0x01, 0x00,
        ...Array(120).fill(0).map(() => Math.floor(Math.random() * 256))
    ]),
    
    'optimizer.dylib': Buffer.from([
        0xFE, 0xED, 0xFA, 0xCE, // Mach-O header (macOS)
        0x00, 0x00, 0x00, 0x0C,
        ...Array(150).fill(0).map(() => Math.floor(Math.random() * 256))
    ]),
    
    'keylogger.bin': Buffer.from([
        // Generic binary with some suspicious patterns
        0x00, 0x01, 0x02, 0x03, 0xFF, 0xFE, 0xFD, 0xFC,
        ...Buffer.from('KEYLOG_BUFFER_START'),
        ...Array(80).fill(0).map(() => Math.floor(Math.random() * 256)),
        ...Buffer.from('KEYLOG_BUFFER_END')
    ]),
    
    'miner.wasm': Buffer.from([
        0x00, 0x61, 0x73, 0x6D, // WebAssembly magic number
        0x01, 0x00, 0x00, 0x00, // Version
        ...Array(200).fill(0).map(() => Math.floor(Math.random() * 256))
    ]),
    
    'backdoor.dll': Buffer.from([
        0x4D, 0x5A, 0x90, 0x00, // MZ header
        0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
        ...Buffer.from('BACKDOOR_PAYLOAD_MARKER'),
        ...Array(90).fill(0).map(() => Math.floor(Math.random() * 256))
    ])
};

// Deploy all binary files
let successCount = 0;
for (const [filename, content] of Object.entries(binaryFiles)) {
    if (deployBinary(filename, content)) {
        successCount++;
    }
}

console.log(`[*] Binary deployment complete: ${successCount}/${Object.keys(binaryFiles).length} files deployed`);

if (successCount > 0) {
    console.log('[!] WARNING: Binary files have been deployed to assets/ directory');
    console.log('[!] These files may be flagged by security software');
}
