rules:
- id: code-execution
  languages:
  - python
  message: This package is executing OS commands in the setup.py file
  metadata:
    confidence: MEDIUM
    description: Identify when an OS command is executed in the setup.py file
    endor-category: malware-detection
    endor-tags:
    - ANALYTICS_INFO
    endor-targets:
    - ENDOR_TARGET_PACKAGE
    version: latest
  paths:
    include:
    - '*/setup.py'
    - '*/code-execution.py'
  patterns:
  - pattern-either:
    - patterns:
      - pattern: exec("...", ...)
      - pattern: exec($ARG1, ...)
    - patterns:
      - pattern: exec("...". ...)
      - pattern: exec($ARG1. ..., ...)
    - patterns:
      - pattern: exec("..." + ...)
      - pattern: exec($ARG1 + ..., ...)
    - pattern: subprocess.getoutput($ARG1, ...)
    - pattern: getoutput($ARG1, ...)
    - pattern: subprocess.getoutput([..., "... $ARG1 ...", ...], ...)
    - pattern: getoutput([..., "... $ARG1 ...", ...], ...)
    - pattern: subprocess.call($ARG1, ...)
    - pattern: call($ARG1, ...)
    - pattern: subprocess.call([..., "... $ARG1 ...", ...], ...)
    - pattern: call([..., "... $ARG1 ...", ...], ...)
    - pattern: subprocess.check_output($ARG1, ...)
    - pattern: check_output($ARG1, ...)
    - pattern: subprocess.check_output([..., "... $ARG1 ...", ...], ...)
    - pattern: check_output([..., "... $ARG1 ...", ...], ...)
    - pattern: subprocess.run($ARG1, ...)
    - pattern: run($ARG1, ...)
    - pattern: subprocess.run([..., "... $ARG1 ...", ...], ...)
    - pattern: run([..., "$ARG1", ...], ...)
    - pattern: subprocess.check_call($ARG1, ...)
    - pattern: check_call($ARG1, ...)
    - pattern: subprocess.check_call([..., "... $ARG1 ...", ...], ...)
    - pattern: check_call([..., "$ARG1", ...], ...)
    - patterns:
      - pattern-either:
        - pattern: eval($ARG1. ..., ...)
        - pattern: eval($ARG1, ...)
        - pattern: eval($ARG1 + ..., ...)
      - pattern-either:
        - patterns:
          - pattern: $EVAL;
          - pattern-not: eval(<...$LINE...>, ...)
          - pattern-not-inside: "if $LINE.startswith(...):\n    ...\n"
        - patterns:
          - pattern: "if $LINE.startswith($STR):\n    ...\n    eval(<...$LINE...>,\
              \ ...)\n"
          - metavariable-pattern:
              metavariable: $STR
              patterns:
              - pattern-not-regex: version
    - pattern: subprocess.Popen($ARG1, ...)
    - pattern: subprocess.Popen([..., $ARG1, ...], ...)
    - pattern: os.popen($ARG1, ...)
    - pattern: os.popen([..., $ARG1, ...], ...)
    - pattern: Popen($ARG1, ...)
    - pattern: Popen([..., $ARG1, ...], ...)
    - pattern: popen($ARG1, ...)
    - pattern: popen([..., $ARG1, ...], ...)
    - pattern: spawn($ARG1, ...)
    - pattern: $OBJ.spawn($ARG1, ...)
    - pattern: os.system($ARG1, ...)
    - pattern: system($ARG1, ...)
    - pattern: execfile($ARG1, ...)
    - pattern: command.run($ARG1, ...)
    - pattern: os.execl($ARG1, ...)
    - pattern: os.execle($ARG1, ...)
    - pattern: os.execlp($ARG1, ...)
    - pattern: os.execlpe($ARG1, ...)
    - pattern: os.execv($ARG1, ...)
    - pattern: os.execve($ARG1, ...)
    - pattern: os.execvp($ARG1, ...)
    - pattern: os.execvpe($ARG1, ...)
    - pattern: os.spawnl($ARG1, ...)
    - pattern: os.spawnle($ARG1, ...)
    - pattern: os.spawnlp($ARG1, ...)
    - pattern: os.spawnlpe($ARG1, ...)
    - pattern: os.spawnv($ARG1, ...)
    - pattern: os.spawnve($ARG1, ...)
    - pattern: os.spawnvp($ARG1, ...)
    - pattern: os.spawnvpe($ARG1, ...)
    - pattern: os.posix_spawn($ARG1, ...)
    - pattern: os.posix_spawnp($ARG1, ...)
    - pattern: __import__('builtins').exec($ARG1)
    - pattern-either:
      - pattern: globals()['eval']($ARG1)
      - pattern: globals()['\x65\x76\x61\x6c']($ARG1)
  - metavariable-pattern:
      metavariable: $ARG1
      patterns:
      - pattern-not-regex: (setup.py|twine|git|brew|gpg|freeze|docker|pycodestyle|libffi|coverage|pre_commit|pkg-config|cmake|pandoc|unittest|sys.executable)
  severity: WARNING
